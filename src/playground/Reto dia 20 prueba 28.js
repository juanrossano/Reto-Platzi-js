// console.log();
console.log("Agenda de vuelos");

class Flight {
  constructor(origin, destination, date, capacity, price) {
    // Tu c칩digo aqu칤 游녣
    this.origin = origin // (origen), 
    this.destination = destination // (destino), 
    this.date = date // (fecha de salida), 
    this.capacity = capacity // (capacidad m치xima), 
    this.price = price // (precio) e inicilizar치 una variable llamada 
    this.passengers = [] // array de pasajeros
  }

  sellTicket(passenger) {
    // Tu c칩digo aqu칤 游녣
    if (this.capacity > 0) {
      const vuelo = new Reservation(this, passenger);
      this.passengers.push({fullName: passenger.name + " " + passenger.lastName, age: passenger.age});
      passenger.addFlight(this.origin, this.destination, this.date, this.price)
      this.capacity--;
      return vuelo;
    }
  }
}

class Passenger {
  // Tu c칩digo aqu칤 游녣
  constructor(name, lastName, age) {
    this.name = name; // nombre, 
    this.lastName = lastName; // apellido 
    this.age = age; // edad
    this.flights = [] // lista de vuelos
  }

  addFlight(origin, destination, date, price) {
    this.flights.push({
      origin: origin, 
      destination: destination, 
      date: date, 
      price: price}) 
  }
}
class Reservation {
  constructor(flight, passenger) {
    // Tu c칩digo aqu칤 游녣
    this.flight = flight;
    this.passenger = passenger;
//    passenger.addFlight(flight.origin, flight.destination, flight.date, flight.price)
  }

  reservationDetails() {
    // Tu c칩digo aqu칤 游녣
    return {origin: this.flight.origin, 
            destination: this.flight.destination, 
            date: this.flight.date, 
            reservedBy: this.passenger.name + " " + this.passenger.lastName};
  }
}

class PremiumFlight extends Flight {
  constructor(origin, destination, date, capacity, price, specialService) {
    // Tu c칩digo aqu칤 游녣
    super(origin, destination, date, capacity, price + specialService);
    this.specialService = specialService;
  }

  sellTicket(passenger) {
    // Tu c칩digo aqu칤 游녣
    const especifico = super.sellTicket(passenger)
    especifico.price += this.specialService;
    return especifico;
  }
}

class EconomicFlight extends Flight {
  constructor(origin, destination, date, capacity, price) {
    // Tu c칩digo aqu칤 游녣
    super(origin, destination, date, capacity, price);
  }

  sellTicket(passenger) {
    // Tu c칩digo aqu칤 游녢
    let especifico = super.sellTicket(passenger)
    if (passenger.age < 18 || passenger.age > 65) {
      this.price *= 0.8;
      especifico.price *= .8;
    }
    return especifico;
  }
}

/** Test */
const flight1 = new Flight("CDMX", "Guadalajara", "2022-01-01", 5, 1000);

const passenger1 = new Passenger("Juan", "Perez", 30);

const reservation1 = flight1.sellTicket(passenger1);

console.log(passenger1.flights)

const flight2 = new Flight("CDMX", "Guadalajara", "2022-01-01", 5, 1000);
const passenger2 = new Passenger("Juan", "Perez", 30);

const reservation2 = flight2.sellTicket(passenger2);

console.log(flight2.passengers)


const flight3 = new EconomicFlight(
  "New York",
  "Paris",
  "2023-12-25",
  100,
  200
);

const passenger3 = new Passenger("Pedro", "Gutierrez", 17);

const reservation3 = flight3.sellTicket(passenger3);

console.log(reservation3.flight.price)

/*
import { Flight } from "./Flight";
import { Reservation } from "./Reservation";

export class EconomicFlight extends Flight {
  sellTicket(passenger) {
    // Tu c칩digo aqu칤 游녢
  }
}
*/


/**
* En este desaf칤o crearas un Sistema de reservaciones de vuelos.

Tendr치s que implementar la l칩gica de las siguientes clases con las siguientes caracter칤sticas (cada clase tiene su propio archivo dentro del coding playground)

Flight: permite crear vuelos regulares con los atributos origin (origen), destination (destino), date (fecha de salida), capacity (capacidad m치xima), price (precio) e inicilizar치 una variable llamada passengers la cual ser치 el array donde almacenaremos a los pasajeros. Adem치s, incluir치 el m칠todo sellTicket(passenger) para vender un boleto a un pasajero espec칤fico siempre y cuando la capacidad sea mayor a cero. Este m칠todo agregar치 al pasajero a la lista de pasajeros del avi칩n y a su vez agregar치 el vuelo a la lista de vuelos del pasajero. La funci칩n devolver치 un objeto reservation.

Passenger: cada pasajero tendr치 los atributos name (nombre), lastName (apellido) y age (edad) y se inicializar치 con una lista de vuelos (flights) vac칤a. Cada que se agregue un vuelo a dicha lista, solo deber치n agregarse las siguientes propiedades: origin, destination, date y price.

Reservation aceptar치 un objeto flight y un objeto passenger, e incluir치 el m칠todo reservationDetails() que devolver치 un objeto con los detalles de la reservaci칩n, incluyendo origin, destination, date y reservedBy (nombre completo del pasajero).

PremiumFlight extender치 de la clase Flight y agregar치 la propiedad specialService que ser치 un costo adicional al precio del vuelo dentro del m칠todo sellTicket(passenger).

EconomicFlightde igual manera, extender치 de la clase Flight y aplicar치 un descuento del 20% dentro del m칠todo sellTicket(passenger) para los pasajeros con una edad menor a 18 a침os o mayor a 65 a침os.

Ejemplo 1


Input:
const flight = new Flight("CDMX", "Guadalajara", "2022-01-01", 5, 1000);

const passenger = new Passenger("Juan", "Perez", 30);

const reservation = flight.sellTicket(passenger);

console.log(passenger.flights)

Output:
[
  {
    origin: "CDMX",
    destination: "Guadalajara",
    date: "2022-01-01",
    price: 1000,
  },
]

Ejemplo 2:

Input:
const flight = new Flight("CDMX", "Guadalajara", "2022-01-01", 5, 1000);
const passenger = new Passenger("Juan", "Perez", 30);

const reservation = flight.sellTicket(passenger);

console.log(flight.passengers)

Output:

[
  {
    fullName: "Juan Perez",
    age: 30,
  },
]

Ejemplo 3:

Input:
const flight = new EconomicFlight(
  "New York",
  "Paris",
  "2023-12-25",
  100,
  200
);

const passenger = new Passenger("Pedro", "Gutierrez", 17);

const reservation = flight.sellTicket(passenger);

console.log(reservation.flight.price)

Output: 160
*/


/*
*** => Solucion

class Flight {
  constructor(origin, destination, date, capacity, price) {
    this.origin = origin;
    this.destination = destination;
    this.date = date;
    this.capacity = capacity;
    this.price = price;
    this.passengers = [];
  }

  sellTicket(passenger) {
    if (this.capacity > 0) {
      this.capacity -= 1;
      const reservation = new Reservation(this, passenger);

      this.passengers.push(reservation.confidentialData);
      passenger.addFlight(this);

      return reservation;
    }
  }
}

class Passenger {
  constructor(name, lastName, age) {
    this.name = name;
    this.lastName = lastName;
    this.age = age;
    this.flights = [];
  }

  addFlight(flight) {
    this.flights.push({
      origin: flight.origin,
      destination: flight.destination,
      date: flight.date,
      price: flight.price,
    });
  }
}

class Reservation {
  constructor(flight, passenger) {
    this.flight = flight;
    this.passenger = passenger;
  }

  get confidentialData() {
    return (() => {
      const fullName = `${this.passenger.name} ${this.passenger.lastName}`;
      const age = this.passenger.age;

      return {
        fullName,
        age,
      };
    })();
  }

  reservationDetails() {
    const flight = this.flight;
    const passenger = this.confidentialData;

    return {
      origin: flight.origin,
      destination: flight.destination,
      date: flight.date,
      reservedBy: passenger.fullName,
    };
  }
}

class PremiumFlight extends Flight {
  constructor(origin, destination, date, capacity, price, specialService) {
    super(origin, destination, date, capacity, price);
    this.specialService = specialService;
  }

  sellTicket(passenger) {
    if (this.capacity > 0) {
      this.capacity -= 1;
      const reservation = new Reservation(this, passenger);

      this.passengers.push(reservation.confidentialData);
      passenger.addFlight(this);
      this.price += this.specialService;

      return reservation;
    }
  }
}

class EconomicFlight extends Flight {
  sellTicket(passenger) {
    if (this.capacity > 0) {
      this.capacity -= 1;
      const reservation = new Reservation(this, passenger);

      this.passengers.push(reservation.confidentialData);
      passenger.addFlight(this);

      if (passenger.age < 18 || passenger.age > 65) {
        this.price *= 0.8;
      }

      return reservation;
    }
  }
}


*/

/*
Should add a flight to passenger

expect(received).toEqual(expected) // deep equality

- Expected - 0
+ Received + 6

Array [
Object {
"date": "2022-01-01",
"destination": "Guadalajara",
"origin": "CDMX",
"price": 1000,
},
+ Object {
+ "date": "2022-01-01",
+ "destination": "Guadalajara",
+ "origin": "CDMX",
+ "price": 1000,
+ },
]
*/