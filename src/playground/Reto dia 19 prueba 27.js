// console.log();
console.log("Implementa un sistema de pagos usando polimorfismo");


function processPay(method, quantity) {
    // Tu cÃ³digo aquÃ­ ðŸ‘ˆ
    return method.makePay(quantity)
}

class Pay {
  // Tu cÃ³digo aquÃ­ ðŸ‘ˆ
  constructor() {}
  makePay( cantidadAPagar) {
    this.quantity = cantidadAPagar;
    return { realized: true, quantity: this.quantity}
  }
}

class PayPal extends Pay {
  // Tu cÃ³digo aquÃ­ ðŸ‘ˆ
  constructor( pemail) {
    super();
    this.email = pemail;
  }
  makePay(cantidadAPagar) {
    this.platform = "PayPal";
    return {
      ...super.makePay(cantidadAPagar),
      platform: this.platform,
      email: this.email
    };
  }
}

class Cash extends Pay {
  // Tu cÃ³digo aquÃ­ ðŸ‘ˆ
  makePay(cantidadAPagar) {
    this.platform = "Cash";
    return {
      ...super.makePay(cantidadAPagar)
    };
  }
}

class Card extends Pay {
  // Tu cÃ³digo aquÃ­ ðŸ‘ˆ
  constructor( NumeroDeTarjeta) {
    super();
    if (NumeroDeTarjeta.length == 16) {
      this.CardNumber = NumeroDeTarjeta;
//      this.lastCardNumbers = (NumeroDeTarjeta % 10000).toString();
        this.lastCardNumbers = this.CardNumber.toString().slice(-4)
      } else
      {
        throw new Error("La longitud no es la correcta");
      }
    }
    makePay(cantidadAPagar) {
      if (this.CardNumber.length !== 16) {
        throw new Error("La longitud no es la correcta");
      }
      this.platform = "Card";
      return {
        ...super.makePay(cantidadAPagar),
        lastCardNumbers: this.lastCardNumbers
      };
    }
}

/** Test */

const card = new Card("4913478952471122")

console.log(processPay(card, 100));

/**
* En este desafÃ­o, tendrÃ¡s que implementar un sistema de pagos utilizando polimorfismo en JavaScript.

Se debe crear una clase base llamada Pay que contenga un Ãºnico mÃ©todo llamado makePay. Este mÃ©todo recibirÃ¡ la cantidad a pagar y devolverÃ¡ un objeto con dos propiedades

realized: true
quantity: $cantidadAPagar
AdemÃ¡s, se deben crear tambiÃ©n las clases PayPal, Card y Cash, donde cada una debe heredar de la clase Pay.

La clase PayPal debe recibir un email en el constructor y el mÃ©todo makePay debe agregar las propiedades:

platform: "PayPal"
email: $EmailRecibido.
La clase Card recibirÃ¡ un nÃºmero de tarjeta de 16 dÃ­gitos. Al momento de acceder al mÃ©todo makePay, se validarÃ¡ si la tarjeta en cuestiÃ³n tiene esa longitud. En caso de no tener los 16 dÃ­gitos, se debe retornar un error. En caso contrario, al mÃ©todo que proviene de Pay, se le agregarÃ¡ la propiedad de lastCardNumber: donde se devolverÃ¡n los Ãºltimos 4 dÃ­gitos de la tarjeta.

La clase Cash simplemente nos devolverÃ¡ lo mismo que la clase base.

Por Ãºltimo se debe implementar la lÃ³gica de la funciÃ³n processPay la cual recibirÃ¡ un mÃ©todo de pago y la cantidad, para poder devolver el objeto llamando al mÃ©todo makePay de cada entidad recibida.

Cada clase tiene su propio archivo dentro del sistema de archvios del playground

Ejemplo 1:


Input:
const card = new Card("4913478952471122")

processPay(card, 100)

Output:

{
  realized: true,
  quantity: 100,
  lastCardNumbers: "1122",
}

Ejemplo 2:


Input:
const paypal = new PayPal("test@mail.com")

processPay(paypal, 240)

Output:

{
  realized: true,
  quantity: 240,
  platform: "PayPal",
  email: "test@mail.com",
}

Ejemplo 3:


Input:
const cash = new Cash()

processPay(cash, 400)

Output:

{
  realized: true,
  quantity: 400,
}
*/

/*
*** -> Solucion
export function processPay(method, quantity) {
  return method.makePay(quantity);
}

export class Pay {

  constructor() {}

  makePay(quantity) {
    return {
      realized: true,
      quantity,
    };
  }
}

import { Pay } from "./Pay.class.js";

export class PayPal extends Pay {

  constructor(email) {
    super();
    this.email = email;
  }

  makePay(quantity) {
    return {
      ...super.makePay(quantity),
      platform: "PayPal",
      email: this.email,
    };
  }
}

import { Pay } from "./Pay.class.js";

export class Card extends Pay {
  constructor(cardNumber) {
    super();
    this.cardNumber = cardNumber;
  }

  makePay(quantity) {
    if (this.cardNumber.length !== 16) {
      throw new Error("Tarjeta invalida");
    }

    const lastCardNumbers = this.cardNumber.toString().slice(-4);

    return {
      ...super.makePay(quantity),
      lastCardNumbers,
    };
  }
}

import { Pay } from "./Pay.class.js";

export class Cash extends Pay {
  constructor() {
    super();
  }
}
*/